services:
  db:
    image: postgres:16-alpine
    container_name: healthapp_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"     # expose to host for local dev/DB tools
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:                           # lets backend wait on "healthy"
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    # Because compose.yaml is at repo root, point the build context to the module
    build:
      context: ./HealthApp-Backend
      dockerfile: Dockerfile.dev
    container_name: healthapp_backend
    depends_on:
      db:
        condition: service_healthy         # wait for db HC to be healthy
    environment:
      # Spring will read these as externalized config
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}

      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_TIME_ZONE: UTC

      # cookie/JWT envs
      COOKIE_DOMAIN: localhost
      COOKIE_SECURE: "false"
      COOKIE_SAME_SITE: Lax
      COOKIE_ACCESS_NAME: ACCESS_TOKEN
      COOKIE_REFRESH_NAME: REFRESH_TOKEN
      JWT_ISSUER: healthapp
      JWT_HS256_SECRET: change-me-very-long-256-bit-string
      JWT_ACCESS_TTL_MINUTES: "15"
      JWT_REFRESH_TTL_DAYS: "10"

      CORS_ALLOWED_ORIGINS: http://localhost:${FRONTEND_PORT:-3000}
    ports:
      - "${BACKEND_PORT:-8080}:8080"
    volumes:
      - ./HealthApp-Backend:/app            
      - maven_cache:/root/.m2
    working_dir: /app
    command: ["sh","-c","chmod +x mvnw && ./mvnw -q spring-boot:run"]

  frontend:
    build:
      context: ./healthapp-frontend
      dockerfile: Dockerfile.dev
    container_name: healthapp_frontend
    depends_on:
      - backend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:${BACKEND_PORT:-8080}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./healthapp-frontend:/app
      - /app/node_modules
    working_dir: /app
    command: ["sh","-c","npm install && npm run dev"]

volumes:
  db_data:
  maven_cache: